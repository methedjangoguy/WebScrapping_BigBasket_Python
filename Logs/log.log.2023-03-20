2023-03-20 19:39:57,656 | INFO | root | 
Searching.....: who is PM of India
2023-03-20 19:40:03,346 | INFO | chatgpt | 

The Prime Minister of India is Narendra Modi.
2023-03-20 19:40:13,154 | INFO | root | 
Searching.....: who is president of India
2023-03-20 19:40:16,385 | INFO | chatgpt | 

Ram Nath Kovind is the current President of India.
2023-03-20 20:24:09,592 | INFO | root | 
Searching.....: rephrase this "Hi SD, can you please ask the user if he/she is unable to asscess HRMS or theo, as in the desciption it is mentioned in one point that that he is unable to access HRMS and in other point he is unable to access theo"
2023-03-20 20:24:14,429 | INFO | chatgpt | 

Hey SD, could you please inquire if the user is having difficulty accessing either HRMS or theo? The description states that they are having trouble with both systems.
2023-03-20 20:33:41,383 | INFO | root | 
Searching.....: cls
2023-03-20 20:34:24,862 | INFO | chatgpt | , '__name__', None)
            if name is not None:
                return name
            name = getattr(cls, '__class__', None)
            if name is not None:
                return name
            return str(cls)
        else:
            return str(cls)


class AttributeDict(dict):
    """
    Dictionary subclass enabling attribute lookup/assignment of keys/values.

    For example::

        >>> m = AttributeDict({'foo': 'bar'})
        >>> m.foo
        'bar'
        >>> m.foo = 'not bar'
        >>> m['foo']
        'not bar'

    """
    def __getattr__(self, key):
        try:
            return self[key]
        except KeyError:
            # to conform with __getattr__ spec
            raise AttributeError(key)

    def __setattr__(self, key, value):
        self[key] = value


class AttributeDictMixin(object):
    """
    Mixin class to enable dictionary key access/assignment to object attributes.

    For example::

        >>> class Foo(object, AttributeDictMixin):
        ...     def __init__(self):
        ...         self.foo = 'bar'
        ...
        >>> f = Foo()
        >>> f.foo
        'bar'
        >>> f['foo']
        'bar'
        >>> f.foo = 'not bar'
        >>> f['foo']
        'not bar'

    """
    _data = None

    @property
    def _attribute_dict(self):
        if self._data is None:
            self._data = AttributeDict()
        return self._data

    def __getattr__(self, key):
        return self._attribute_dict[key]

    def __setattr__(self, key, value):
        if key == '_data':
            # set private attributes as usual
            object.__setattr__(self, key, value)
        else:
            self._attribute_dict[key] = value


class Struct(object):
    """
    Dictionary-like object, suitable as a simple data structure.

    For example::

        >>> s = Struct(foo='bar')
        >>> s.foo
        'bar'
        >>> s.foo = 'not bar'
        >>> s['foo']
        'not bar'

    """
    def __init__(self, **entries):
        self.__dict__.update(entries)

    def __getattr__(self, key):
        try:
            return self.__dict__[key]
        except KeyError:
            # to conform with __getattr__ spec
            raise AttributeError(key)

    def __setattr__(self, key, value):
        self.__dict__[key] = value

    def __getitem__(self, key):
        return self.__dict__[key]

    def __setitem__(self, key, value):
        self.__dict__[key] = value

    def __contains__(self, key):
        return key in self.__dict__

    def __len__(self):
        return len(self.__dict__)

    def __repr__(self):
        return '<Struct %s>' % repr(self.__dict__)


class StructMixin(object):
    """
    Mixin class to enable dictionary key access/assignment to object attributes.

    For example::

        >>> class Foo(object, StructMixin):
        ...     def __init__(self):
        ...         self.foo = 'bar'
        ...
        >>> f = Foo()
        >>> f.foo
        'bar'
        >>> f['foo']
        'bar'
        >>> f.foo = 'not bar'
        >>> f['foo']
        'not bar'

    """
    _data = None

    @property
    def _struct(self):
        if self._data is None:
            self._data = Struct()
        return self._data

    def __getattr__(self, key):
        return self._struct[key]

    def __setattr__(self, key, value):
        if key == '_data':
            # set private attributes as usual
            object.__setattr
